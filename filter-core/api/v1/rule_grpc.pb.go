// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: api/v1/rule.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Rule_AddRule_FullMethodName = "/v1.Rule/AddRule"
	Rule_DelRule_FullMethodName = "/v1.Rule/DelRule"
)

// RuleClient is the client API for Rule service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuleClient interface {
	AddRule(ctx context.Context, in *AddRuleReq, opts ...grpc.CallOption) (*AddRuleResp, error)
	DelRule(ctx context.Context, in *DelRuleReq, opts ...grpc.CallOption) (*DelRuleResp, error)
}

type ruleClient struct {
	cc grpc.ClientConnInterface
}

func NewRuleClient(cc grpc.ClientConnInterface) RuleClient {
	return &ruleClient{cc}
}

func (c *ruleClient) AddRule(ctx context.Context, in *AddRuleReq, opts ...grpc.CallOption) (*AddRuleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddRuleResp)
	err := c.cc.Invoke(ctx, Rule_AddRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleClient) DelRule(ctx context.Context, in *DelRuleReq, opts ...grpc.CallOption) (*DelRuleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelRuleResp)
	err := c.cc.Invoke(ctx, Rule_DelRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuleServer is the server API for Rule service.
// All implementations must embed UnimplementedRuleServer
// for forward compatibility.
type RuleServer interface {
	AddRule(context.Context, *AddRuleReq) (*AddRuleResp, error)
	DelRule(context.Context, *DelRuleReq) (*DelRuleResp, error)
	mustEmbedUnimplementedRuleServer()
}

// UnimplementedRuleServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRuleServer struct{}

func (UnimplementedRuleServer) AddRule(context.Context, *AddRuleReq) (*AddRuleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRule not implemented")
}
func (UnimplementedRuleServer) DelRule(context.Context, *DelRuleReq) (*DelRuleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRule not implemented")
}
func (UnimplementedRuleServer) mustEmbedUnimplementedRuleServer() {}
func (UnimplementedRuleServer) testEmbeddedByValue()              {}

// UnsafeRuleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuleServer will
// result in compilation errors.
type UnsafeRuleServer interface {
	mustEmbedUnimplementedRuleServer()
}

func RegisterRuleServer(s grpc.ServiceRegistrar, srv RuleServer) {
	// If the following call pancis, it indicates UnimplementedRuleServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Rule_ServiceDesc, srv)
}

func _Rule_AddRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServer).AddRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rule_AddRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServer).AddRule(ctx, req.(*AddRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rule_DelRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServer).DelRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rule_DelRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServer).DelRule(ctx, req.(*DelRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Rule_ServiceDesc is the grpc.ServiceDesc for Rule service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rule_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Rule",
	HandlerType: (*RuleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRule",
			Handler:    _Rule_AddRule_Handler,
		},
		{
			MethodName: "DelRule",
			Handler:    _Rule_DelRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/rule.proto",
}

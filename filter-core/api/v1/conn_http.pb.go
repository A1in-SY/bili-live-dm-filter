// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             v5.27.3
// source: api/v1/conn.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationConnAddLiveRoomDanmu = "/v1.Conn/AddLiveRoomDanmu"
const OperationConnDelLiveRoomDanmu = "/v1.Conn/DelLiveRoomDanmu"
const OperationConnDisableLiveRoomDanmu = "/v1.Conn/DisableLiveRoomDanmu"
const OperationConnEnableLiveRoomDanmu = "/v1.Conn/EnableLiveRoomDanmu"

type ConnHTTPServer interface {
	AddLiveRoomDanmu(context.Context, *AddLiveRoomDanmuReq) (*AddLiveRoomDanmuResp, error)
	DelLiveRoomDanmu(context.Context, *DelLiveRoomDanmuReq) (*DelLiveRoomDanmuResp, error)
	DisableLiveRoomDanmu(context.Context, *DisableLiveRoomDanmuReq) (*DisableLiveRoomDanmuResp, error)
	EnableLiveRoomDanmu(context.Context, *EnableLiveRoomDanmuReq) (*EnableLiveRoomDanmuResp, error)
}

func RegisterConnHTTPServer(s *http.Server, srv ConnHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/conn/add_live_room_danmu", _Conn_AddLiveRoomDanmu0_HTTP_Handler(srv))
	r.POST("/api/v1/conn/del_live_room_danmu", _Conn_DelLiveRoomDanmu0_HTTP_Handler(srv))
	r.POST("/api/v1/conn/enable_live_room_danmu", _Conn_EnableLiveRoomDanmu0_HTTP_Handler(srv))
	r.POST("/api/v1/conn/disable_live_room_danmu", _Conn_DisableLiveRoomDanmu0_HTTP_Handler(srv))
}

func _Conn_AddLiveRoomDanmu0_HTTP_Handler(srv ConnHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddLiveRoomDanmuReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConnAddLiveRoomDanmu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddLiveRoomDanmu(ctx, req.(*AddLiveRoomDanmuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddLiveRoomDanmuResp)
		return ctx.Result(200, reply)
	}
}

func _Conn_DelLiveRoomDanmu0_HTTP_Handler(srv ConnHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelLiveRoomDanmuReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConnDelLiveRoomDanmu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelLiveRoomDanmu(ctx, req.(*DelLiveRoomDanmuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DelLiveRoomDanmuResp)
		return ctx.Result(200, reply)
	}
}

func _Conn_EnableLiveRoomDanmu0_HTTP_Handler(srv ConnHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EnableLiveRoomDanmuReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConnEnableLiveRoomDanmu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EnableLiveRoomDanmu(ctx, req.(*EnableLiveRoomDanmuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EnableLiveRoomDanmuResp)
		return ctx.Result(200, reply)
	}
}

func _Conn_DisableLiveRoomDanmu0_HTTP_Handler(srv ConnHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DisableLiveRoomDanmuReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConnDisableLiveRoomDanmu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DisableLiveRoomDanmu(ctx, req.(*DisableLiveRoomDanmuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DisableLiveRoomDanmuResp)
		return ctx.Result(200, reply)
	}
}

type ConnHTTPClient interface {
	AddLiveRoomDanmu(ctx context.Context, req *AddLiveRoomDanmuReq, opts ...http.CallOption) (rsp *AddLiveRoomDanmuResp, err error)
	DelLiveRoomDanmu(ctx context.Context, req *DelLiveRoomDanmuReq, opts ...http.CallOption) (rsp *DelLiveRoomDanmuResp, err error)
	DisableLiveRoomDanmu(ctx context.Context, req *DisableLiveRoomDanmuReq, opts ...http.CallOption) (rsp *DisableLiveRoomDanmuResp, err error)
	EnableLiveRoomDanmu(ctx context.Context, req *EnableLiveRoomDanmuReq, opts ...http.CallOption) (rsp *EnableLiveRoomDanmuResp, err error)
}

type ConnHTTPClientImpl struct {
	cc *http.Client
}

func NewConnHTTPClient(client *http.Client) ConnHTTPClient {
	return &ConnHTTPClientImpl{client}
}

func (c *ConnHTTPClientImpl) AddLiveRoomDanmu(ctx context.Context, in *AddLiveRoomDanmuReq, opts ...http.CallOption) (*AddLiveRoomDanmuResp, error) {
	var out AddLiveRoomDanmuResp
	pattern := "/api/v1/conn/add_live_room_danmu"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConnAddLiveRoomDanmu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConnHTTPClientImpl) DelLiveRoomDanmu(ctx context.Context, in *DelLiveRoomDanmuReq, opts ...http.CallOption) (*DelLiveRoomDanmuResp, error) {
	var out DelLiveRoomDanmuResp
	pattern := "/api/v1/conn/del_live_room_danmu"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConnDelLiveRoomDanmu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConnHTTPClientImpl) DisableLiveRoomDanmu(ctx context.Context, in *DisableLiveRoomDanmuReq, opts ...http.CallOption) (*DisableLiveRoomDanmuResp, error) {
	var out DisableLiveRoomDanmuResp
	pattern := "/api/v1/conn/disable_live_room_danmu"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConnDisableLiveRoomDanmu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConnHTTPClientImpl) EnableLiveRoomDanmu(ctx context.Context, in *EnableLiveRoomDanmuReq, opts ...http.CallOption) (*EnableLiveRoomDanmuResp, error) {
	var out EnableLiveRoomDanmuResp
	pattern := "/api/v1/conn/enable_live_room_danmu"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConnEnableLiveRoomDanmu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

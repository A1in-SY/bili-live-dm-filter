// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: api/v1/conn.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Conn_AddLiveRoomDanmu_FullMethodName     = "/v1.Conn/AddLiveRoomDanmu"
	Conn_DelLiveRoomDanmu_FullMethodName     = "/v1.Conn/DelLiveRoomDanmu"
	Conn_EnableLiveRoomDanmu_FullMethodName  = "/v1.Conn/EnableLiveRoomDanmu"
	Conn_DisableLiveRoomDanmu_FullMethodName = "/v1.Conn/DisableLiveRoomDanmu"
)

// ConnClient is the client API for Conn service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnClient interface {
	AddLiveRoomDanmu(ctx context.Context, in *AddLiveRoomDanmuReq, opts ...grpc.CallOption) (*AddLiveRoomDanmuResp, error)
	DelLiveRoomDanmu(ctx context.Context, in *DelLiveRoomDanmuReq, opts ...grpc.CallOption) (*DelLiveRoomDanmuResp, error)
	EnableLiveRoomDanmu(ctx context.Context, in *EnableLiveRoomDanmuReq, opts ...grpc.CallOption) (*EnableLiveRoomDanmuResp, error)
	DisableLiveRoomDanmu(ctx context.Context, in *DisableLiveRoomDanmuReq, opts ...grpc.CallOption) (*DisableLiveRoomDanmuResp, error)
}

type connClient struct {
	cc grpc.ClientConnInterface
}

func NewConnClient(cc grpc.ClientConnInterface) ConnClient {
	return &connClient{cc}
}

func (c *connClient) AddLiveRoomDanmu(ctx context.Context, in *AddLiveRoomDanmuReq, opts ...grpc.CallOption) (*AddLiveRoomDanmuResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddLiveRoomDanmuResp)
	err := c.cc.Invoke(ctx, Conn_AddLiveRoomDanmu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connClient) DelLiveRoomDanmu(ctx context.Context, in *DelLiveRoomDanmuReq, opts ...grpc.CallOption) (*DelLiveRoomDanmuResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelLiveRoomDanmuResp)
	err := c.cc.Invoke(ctx, Conn_DelLiveRoomDanmu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connClient) EnableLiveRoomDanmu(ctx context.Context, in *EnableLiveRoomDanmuReq, opts ...grpc.CallOption) (*EnableLiveRoomDanmuResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableLiveRoomDanmuResp)
	err := c.cc.Invoke(ctx, Conn_EnableLiveRoomDanmu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connClient) DisableLiveRoomDanmu(ctx context.Context, in *DisableLiveRoomDanmuReq, opts ...grpc.CallOption) (*DisableLiveRoomDanmuResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableLiveRoomDanmuResp)
	err := c.cc.Invoke(ctx, Conn_DisableLiveRoomDanmu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnServer is the server API for Conn service.
// All implementations must embed UnimplementedConnServer
// for forward compatibility.
type ConnServer interface {
	AddLiveRoomDanmu(context.Context, *AddLiveRoomDanmuReq) (*AddLiveRoomDanmuResp, error)
	DelLiveRoomDanmu(context.Context, *DelLiveRoomDanmuReq) (*DelLiveRoomDanmuResp, error)
	EnableLiveRoomDanmu(context.Context, *EnableLiveRoomDanmuReq) (*EnableLiveRoomDanmuResp, error)
	DisableLiveRoomDanmu(context.Context, *DisableLiveRoomDanmuReq) (*DisableLiveRoomDanmuResp, error)
	mustEmbedUnimplementedConnServer()
}

// UnimplementedConnServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConnServer struct{}

func (UnimplementedConnServer) AddLiveRoomDanmu(context.Context, *AddLiveRoomDanmuReq) (*AddLiveRoomDanmuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLiveRoomDanmu not implemented")
}
func (UnimplementedConnServer) DelLiveRoomDanmu(context.Context, *DelLiveRoomDanmuReq) (*DelLiveRoomDanmuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelLiveRoomDanmu not implemented")
}
func (UnimplementedConnServer) EnableLiveRoomDanmu(context.Context, *EnableLiveRoomDanmuReq) (*EnableLiveRoomDanmuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableLiveRoomDanmu not implemented")
}
func (UnimplementedConnServer) DisableLiveRoomDanmu(context.Context, *DisableLiveRoomDanmuReq) (*DisableLiveRoomDanmuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableLiveRoomDanmu not implemented")
}
func (UnimplementedConnServer) mustEmbedUnimplementedConnServer() {}
func (UnimplementedConnServer) testEmbeddedByValue()              {}

// UnsafeConnServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnServer will
// result in compilation errors.
type UnsafeConnServer interface {
	mustEmbedUnimplementedConnServer()
}

func RegisterConnServer(s grpc.ServiceRegistrar, srv ConnServer) {
	// If the following call pancis, it indicates UnimplementedConnServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Conn_ServiceDesc, srv)
}

func _Conn_AddLiveRoomDanmu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLiveRoomDanmuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnServer).AddLiveRoomDanmu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conn_AddLiveRoomDanmu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnServer).AddLiveRoomDanmu(ctx, req.(*AddLiveRoomDanmuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conn_DelLiveRoomDanmu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelLiveRoomDanmuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnServer).DelLiveRoomDanmu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conn_DelLiveRoomDanmu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnServer).DelLiveRoomDanmu(ctx, req.(*DelLiveRoomDanmuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conn_EnableLiveRoomDanmu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableLiveRoomDanmuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnServer).EnableLiveRoomDanmu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conn_EnableLiveRoomDanmu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnServer).EnableLiveRoomDanmu(ctx, req.(*EnableLiveRoomDanmuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conn_DisableLiveRoomDanmu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableLiveRoomDanmuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnServer).DisableLiveRoomDanmu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conn_DisableLiveRoomDanmu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnServer).DisableLiveRoomDanmu(ctx, req.(*DisableLiveRoomDanmuReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Conn_ServiceDesc is the grpc.ServiceDesc for Conn service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Conn_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Conn",
	HandlerType: (*ConnServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddLiveRoomDanmu",
			Handler:    _Conn_AddLiveRoomDanmu_Handler,
		},
		{
			MethodName: "DelLiveRoomDanmu",
			Handler:    _Conn_DelLiveRoomDanmu_Handler,
		},
		{
			MethodName: "EnableLiveRoomDanmu",
			Handler:    _Conn_EnableLiveRoomDanmu_Handler,
		},
		{
			MethodName: "DisableLiveRoomDanmu",
			Handler:    _Conn_DisableLiveRoomDanmu_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/conn.proto",
}

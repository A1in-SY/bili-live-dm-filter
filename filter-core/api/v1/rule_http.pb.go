// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             v5.27.3
// source: api/v1/rule.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRuleAddRule = "/v1.Rule/AddRule"
const OperationRuleDelRule = "/v1.Rule/DelRule"

type RuleHTTPServer interface {
	AddRule(context.Context, *AddRuleReq) (*AddRuleResp, error)
	DelRule(context.Context, *DelRuleReq) (*DelRuleResp, error)
}

func RegisterRuleHTTPServer(s *http.Server, srv RuleHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/core/add_rule", _Rule_AddRule0_HTTP_Handler(srv))
	r.POST("/api/v1/core/del_rule", _Rule_DelRule0_HTTP_Handler(srv))
}

func _Rule_AddRule0_HTTP_Handler(srv RuleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddRuleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRuleAddRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddRule(ctx, req.(*AddRuleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddRuleResp)
		return ctx.Result(200, reply)
	}
}

func _Rule_DelRule0_HTTP_Handler(srv RuleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelRuleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRuleDelRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelRule(ctx, req.(*DelRuleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DelRuleResp)
		return ctx.Result(200, reply)
	}
}

type RuleHTTPClient interface {
	AddRule(ctx context.Context, req *AddRuleReq, opts ...http.CallOption) (rsp *AddRuleResp, err error)
	DelRule(ctx context.Context, req *DelRuleReq, opts ...http.CallOption) (rsp *DelRuleResp, err error)
}

type RuleHTTPClientImpl struct {
	cc *http.Client
}

func NewRuleHTTPClient(client *http.Client) RuleHTTPClient {
	return &RuleHTTPClientImpl{client}
}

func (c *RuleHTTPClientImpl) AddRule(ctx context.Context, in *AddRuleReq, opts ...http.CallOption) (*AddRuleResp, error) {
	var out AddRuleResp
	pattern := "/api/v1/core/add_rule"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRuleAddRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RuleHTTPClientImpl) DelRule(ctx context.Context, in *DelRuleReq, opts ...http.CallOption) (*DelRuleResp, error) {
	var out DelRuleResp
	pattern := "/api/v1/core/del_rule"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRuleDelRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

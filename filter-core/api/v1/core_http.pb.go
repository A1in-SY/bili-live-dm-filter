// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.1
// - protoc             v3.14.0
// source: api/v1/core.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCoreAddAction = "/v1.Core/AddAction"
const OperationCoreAddLiveRoomDanmu = "/v1.Core/AddLiveRoomDanmu"
const OperationCoreAddRule = "/v1.Core/AddRule"
const OperationCoreDelAction = "/v1.Core/DelAction"
const OperationCoreDelLiveRoomDanmu = "/v1.Core/DelLiveRoomDanmu"
const OperationCoreDelRule = "/v1.Core/DelRule"
const OperationCoreDisableAction = "/v1.Core/DisableAction"
const OperationCoreDisableLiveRoomDanmu = "/v1.Core/DisableLiveRoomDanmu"
const OperationCoreDisableRule = "/v1.Core/DisableRule"
const OperationCoreEnableAction = "/v1.Core/EnableAction"
const OperationCoreEnableLiveRoomDanmu = "/v1.Core/EnableLiveRoomDanmu"
const OperationCoreEnableRule = "/v1.Core/EnableRule"
const OperationCorePreCheckDelAction = "/v1.Core/PreCheckDelAction"
const OperationCorePreCheckDelRule = "/v1.Core/PreCheckDelRule"
const OperationCoreUpdateAction = "/v1.Core/UpdateAction"
const OperationCoreUpdateLiveRoomDanmu = "/v1.Core/UpdateLiveRoomDanmu"
const OperationCoreUpdateRule = "/v1.Core/UpdateRule"

type CoreHTTPServer interface {
	AddAction(context.Context, *AddActionReq) (*AddActionResp, error)
	AddLiveRoomDanmu(context.Context, *AddLiveRoomDanmuReq) (*AddLiveRoomDanmuResp, error)
	AddRule(context.Context, *AddRuleReq) (*AddRuleResp, error)
	DelAction(context.Context, *DelActionReq) (*DelActionResp, error)
	DelLiveRoomDanmu(context.Context, *DelLiveRoomDanmuReq) (*DelLiveRoomDanmuResp, error)
	DelRule(context.Context, *DelRuleReq) (*DelRuleResp, error)
	DisableAction(context.Context, *DisableActionReq) (*DisableActionResp, error)
	DisableLiveRoomDanmu(context.Context, *DisableLiveRoomDanmuReq) (*DisableLiveRoomDanmuResp, error)
	DisableRule(context.Context, *DisableRuleReq) (*DisableRuleResp, error)
	EnableAction(context.Context, *EnableActionReq) (*EnableActionResp, error)
	EnableLiveRoomDanmu(context.Context, *EnableLiveRoomDanmuReq) (*EnableLiveRoomDanmuResp, error)
	EnableRule(context.Context, *EnableRuleReq) (*EnableRuleResp, error)
	PreCheckDelAction(context.Context, *PreCheckDelActionReq) (*PreCheckDelActionResp, error)
	PreCheckDelRule(context.Context, *PreCheckDelRuleReq) (*PreCheckDelRuleResp, error)
	UpdateAction(context.Context, *UpdateActionReq) (*UpdateActionResp, error)
	UpdateLiveRoomDanmu(context.Context, *UpdateLiveRoomDanmuReq) (*UpdateLiveRoomDanmuResp, error)
	UpdateRule(context.Context, *UpdateRuleReq) (*UpdateRuleResp, error)
}

func RegisterCoreHTTPServer(s *http.Server, srv CoreHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/core/add_live_room_danmu", _Core_AddLiveRoomDanmu0_HTTP_Handler(srv))
	r.POST("/api/v1/core/del_live_room_danmu", _Core_DelLiveRoomDanmu0_HTTP_Handler(srv))
	r.POST("/api/v1/core/update_live_room_danmu", _Core_UpdateLiveRoomDanmu0_HTTP_Handler(srv))
	r.POST("/api/v1/core/enable_live_room_danmu", _Core_EnableLiveRoomDanmu0_HTTP_Handler(srv))
	r.POST("/api/v1/core/disable_live_room_danmu", _Core_DisableLiveRoomDanmu0_HTTP_Handler(srv))
	r.POST("/api/v1/core/add_rule", _Core_AddRule0_HTTP_Handler(srv))
	r.POST("/api/v1/core/del_rule", _Core_DelRule0_HTTP_Handler(srv))
	r.POST("/api/v1/core/update_rule", _Core_UpdateRule0_HTTP_Handler(srv))
	r.POST("/api/v1/core/enable_rule", _Core_EnableRule0_HTTP_Handler(srv))
	r.POST("/api/v1/core/disable_rule", _Core_DisableRule0_HTTP_Handler(srv))
	r.POST("/api/v1/core/pre_check_del_rule", _Core_PreCheckDelRule0_HTTP_Handler(srv))
	r.POST("/api/v1/core/add_action", _Core_AddAction0_HTTP_Handler(srv))
	r.POST("/api/v1/core/del_action", _Core_DelAction0_HTTP_Handler(srv))
	r.POST("/api/v1/core/update_action", _Core_UpdateAction0_HTTP_Handler(srv))
	r.POST("/api/v1/core/enable_action", _Core_EnableAction0_HTTP_Handler(srv))
	r.POST("/api/v1/core/disable_action", _Core_DisableAction0_HTTP_Handler(srv))
	r.POST("/api/v1/core/pre_check_del_action", _Core_PreCheckDelAction0_HTTP_Handler(srv))
}

func _Core_AddLiveRoomDanmu0_HTTP_Handler(srv CoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddLiveRoomDanmuReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCoreAddLiveRoomDanmu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddLiveRoomDanmu(ctx, req.(*AddLiveRoomDanmuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddLiveRoomDanmuResp)
		return ctx.Result(200, reply)
	}
}

func _Core_DelLiveRoomDanmu0_HTTP_Handler(srv CoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelLiveRoomDanmuReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCoreDelLiveRoomDanmu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelLiveRoomDanmu(ctx, req.(*DelLiveRoomDanmuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DelLiveRoomDanmuResp)
		return ctx.Result(200, reply)
	}
}

func _Core_UpdateLiveRoomDanmu0_HTTP_Handler(srv CoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateLiveRoomDanmuReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCoreUpdateLiveRoomDanmu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateLiveRoomDanmu(ctx, req.(*UpdateLiveRoomDanmuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateLiveRoomDanmuResp)
		return ctx.Result(200, reply)
	}
}

func _Core_EnableLiveRoomDanmu0_HTTP_Handler(srv CoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EnableLiveRoomDanmuReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCoreEnableLiveRoomDanmu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EnableLiveRoomDanmu(ctx, req.(*EnableLiveRoomDanmuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EnableLiveRoomDanmuResp)
		return ctx.Result(200, reply)
	}
}

func _Core_DisableLiveRoomDanmu0_HTTP_Handler(srv CoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DisableLiveRoomDanmuReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCoreDisableLiveRoomDanmu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DisableLiveRoomDanmu(ctx, req.(*DisableLiveRoomDanmuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DisableLiveRoomDanmuResp)
		return ctx.Result(200, reply)
	}
}

func _Core_AddRule0_HTTP_Handler(srv CoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddRuleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCoreAddRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddRule(ctx, req.(*AddRuleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddRuleResp)
		return ctx.Result(200, reply)
	}
}

func _Core_DelRule0_HTTP_Handler(srv CoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelRuleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCoreDelRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelRule(ctx, req.(*DelRuleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DelRuleResp)
		return ctx.Result(200, reply)
	}
}

func _Core_UpdateRule0_HTTP_Handler(srv CoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRuleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCoreUpdateRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRule(ctx, req.(*UpdateRuleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRuleResp)
		return ctx.Result(200, reply)
	}
}

func _Core_EnableRule0_HTTP_Handler(srv CoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EnableRuleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCoreEnableRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EnableRule(ctx, req.(*EnableRuleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EnableRuleResp)
		return ctx.Result(200, reply)
	}
}

func _Core_DisableRule0_HTTP_Handler(srv CoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DisableRuleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCoreDisableRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DisableRule(ctx, req.(*DisableRuleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DisableRuleResp)
		return ctx.Result(200, reply)
	}
}

func _Core_PreCheckDelRule0_HTTP_Handler(srv CoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PreCheckDelRuleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCorePreCheckDelRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PreCheckDelRule(ctx, req.(*PreCheckDelRuleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PreCheckDelRuleResp)
		return ctx.Result(200, reply)
	}
}

func _Core_AddAction0_HTTP_Handler(srv CoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddActionReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCoreAddAction)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddAction(ctx, req.(*AddActionReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddActionResp)
		return ctx.Result(200, reply)
	}
}

func _Core_DelAction0_HTTP_Handler(srv CoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelActionReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCoreDelAction)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelAction(ctx, req.(*DelActionReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DelActionResp)
		return ctx.Result(200, reply)
	}
}

func _Core_UpdateAction0_HTTP_Handler(srv CoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateActionReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCoreUpdateAction)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAction(ctx, req.(*UpdateActionReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateActionResp)
		return ctx.Result(200, reply)
	}
}

func _Core_EnableAction0_HTTP_Handler(srv CoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EnableActionReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCoreEnableAction)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EnableAction(ctx, req.(*EnableActionReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EnableActionResp)
		return ctx.Result(200, reply)
	}
}

func _Core_DisableAction0_HTTP_Handler(srv CoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DisableActionReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCoreDisableAction)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DisableAction(ctx, req.(*DisableActionReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DisableActionResp)
		return ctx.Result(200, reply)
	}
}

func _Core_PreCheckDelAction0_HTTP_Handler(srv CoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PreCheckDelActionReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCorePreCheckDelAction)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PreCheckDelAction(ctx, req.(*PreCheckDelActionReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PreCheckDelActionResp)
		return ctx.Result(200, reply)
	}
}

type CoreHTTPClient interface {
	AddAction(ctx context.Context, req *AddActionReq, opts ...http.CallOption) (rsp *AddActionResp, err error)
	AddLiveRoomDanmu(ctx context.Context, req *AddLiveRoomDanmuReq, opts ...http.CallOption) (rsp *AddLiveRoomDanmuResp, err error)
	AddRule(ctx context.Context, req *AddRuleReq, opts ...http.CallOption) (rsp *AddRuleResp, err error)
	DelAction(ctx context.Context, req *DelActionReq, opts ...http.CallOption) (rsp *DelActionResp, err error)
	DelLiveRoomDanmu(ctx context.Context, req *DelLiveRoomDanmuReq, opts ...http.CallOption) (rsp *DelLiveRoomDanmuResp, err error)
	DelRule(ctx context.Context, req *DelRuleReq, opts ...http.CallOption) (rsp *DelRuleResp, err error)
	DisableAction(ctx context.Context, req *DisableActionReq, opts ...http.CallOption) (rsp *DisableActionResp, err error)
	DisableLiveRoomDanmu(ctx context.Context, req *DisableLiveRoomDanmuReq, opts ...http.CallOption) (rsp *DisableLiveRoomDanmuResp, err error)
	DisableRule(ctx context.Context, req *DisableRuleReq, opts ...http.CallOption) (rsp *DisableRuleResp, err error)
	EnableAction(ctx context.Context, req *EnableActionReq, opts ...http.CallOption) (rsp *EnableActionResp, err error)
	EnableLiveRoomDanmu(ctx context.Context, req *EnableLiveRoomDanmuReq, opts ...http.CallOption) (rsp *EnableLiveRoomDanmuResp, err error)
	EnableRule(ctx context.Context, req *EnableRuleReq, opts ...http.CallOption) (rsp *EnableRuleResp, err error)
	PreCheckDelAction(ctx context.Context, req *PreCheckDelActionReq, opts ...http.CallOption) (rsp *PreCheckDelActionResp, err error)
	PreCheckDelRule(ctx context.Context, req *PreCheckDelRuleReq, opts ...http.CallOption) (rsp *PreCheckDelRuleResp, err error)
	UpdateAction(ctx context.Context, req *UpdateActionReq, opts ...http.CallOption) (rsp *UpdateActionResp, err error)
	UpdateLiveRoomDanmu(ctx context.Context, req *UpdateLiveRoomDanmuReq, opts ...http.CallOption) (rsp *UpdateLiveRoomDanmuResp, err error)
	UpdateRule(ctx context.Context, req *UpdateRuleReq, opts ...http.CallOption) (rsp *UpdateRuleResp, err error)
}

type CoreHTTPClientImpl struct {
	cc *http.Client
}

func NewCoreHTTPClient(client *http.Client) CoreHTTPClient {
	return &CoreHTTPClientImpl{client}
}

func (c *CoreHTTPClientImpl) AddAction(ctx context.Context, in *AddActionReq, opts ...http.CallOption) (*AddActionResp, error) {
	var out AddActionResp
	pattern := "/api/v1/core/add_action"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCoreAddAction))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CoreHTTPClientImpl) AddLiveRoomDanmu(ctx context.Context, in *AddLiveRoomDanmuReq, opts ...http.CallOption) (*AddLiveRoomDanmuResp, error) {
	var out AddLiveRoomDanmuResp
	pattern := "/api/v1/core/add_live_room_danmu"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCoreAddLiveRoomDanmu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CoreHTTPClientImpl) AddRule(ctx context.Context, in *AddRuleReq, opts ...http.CallOption) (*AddRuleResp, error) {
	var out AddRuleResp
	pattern := "/api/v1/core/add_rule"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCoreAddRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CoreHTTPClientImpl) DelAction(ctx context.Context, in *DelActionReq, opts ...http.CallOption) (*DelActionResp, error) {
	var out DelActionResp
	pattern := "/api/v1/core/del_action"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCoreDelAction))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CoreHTTPClientImpl) DelLiveRoomDanmu(ctx context.Context, in *DelLiveRoomDanmuReq, opts ...http.CallOption) (*DelLiveRoomDanmuResp, error) {
	var out DelLiveRoomDanmuResp
	pattern := "/api/v1/core/del_live_room_danmu"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCoreDelLiveRoomDanmu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CoreHTTPClientImpl) DelRule(ctx context.Context, in *DelRuleReq, opts ...http.CallOption) (*DelRuleResp, error) {
	var out DelRuleResp
	pattern := "/api/v1/core/del_rule"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCoreDelRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CoreHTTPClientImpl) DisableAction(ctx context.Context, in *DisableActionReq, opts ...http.CallOption) (*DisableActionResp, error) {
	var out DisableActionResp
	pattern := "/api/v1/core/disable_action"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCoreDisableAction))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CoreHTTPClientImpl) DisableLiveRoomDanmu(ctx context.Context, in *DisableLiveRoomDanmuReq, opts ...http.CallOption) (*DisableLiveRoomDanmuResp, error) {
	var out DisableLiveRoomDanmuResp
	pattern := "/api/v1/core/disable_live_room_danmu"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCoreDisableLiveRoomDanmu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CoreHTTPClientImpl) DisableRule(ctx context.Context, in *DisableRuleReq, opts ...http.CallOption) (*DisableRuleResp, error) {
	var out DisableRuleResp
	pattern := "/api/v1/core/disable_rule"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCoreDisableRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CoreHTTPClientImpl) EnableAction(ctx context.Context, in *EnableActionReq, opts ...http.CallOption) (*EnableActionResp, error) {
	var out EnableActionResp
	pattern := "/api/v1/core/enable_action"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCoreEnableAction))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CoreHTTPClientImpl) EnableLiveRoomDanmu(ctx context.Context, in *EnableLiveRoomDanmuReq, opts ...http.CallOption) (*EnableLiveRoomDanmuResp, error) {
	var out EnableLiveRoomDanmuResp
	pattern := "/api/v1/core/enable_live_room_danmu"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCoreEnableLiveRoomDanmu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CoreHTTPClientImpl) EnableRule(ctx context.Context, in *EnableRuleReq, opts ...http.CallOption) (*EnableRuleResp, error) {
	var out EnableRuleResp
	pattern := "/api/v1/core/enable_rule"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCoreEnableRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CoreHTTPClientImpl) PreCheckDelAction(ctx context.Context, in *PreCheckDelActionReq, opts ...http.CallOption) (*PreCheckDelActionResp, error) {
	var out PreCheckDelActionResp
	pattern := "/api/v1/core/pre_check_del_action"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCorePreCheckDelAction))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CoreHTTPClientImpl) PreCheckDelRule(ctx context.Context, in *PreCheckDelRuleReq, opts ...http.CallOption) (*PreCheckDelRuleResp, error) {
	var out PreCheckDelRuleResp
	pattern := "/api/v1/core/pre_check_del_rule"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCorePreCheckDelRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CoreHTTPClientImpl) UpdateAction(ctx context.Context, in *UpdateActionReq, opts ...http.CallOption) (*UpdateActionResp, error) {
	var out UpdateActionResp
	pattern := "/api/v1/core/update_action"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCoreUpdateAction))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CoreHTTPClientImpl) UpdateLiveRoomDanmu(ctx context.Context, in *UpdateLiveRoomDanmuReq, opts ...http.CallOption) (*UpdateLiveRoomDanmuResp, error) {
	var out UpdateLiveRoomDanmuResp
	pattern := "/api/v1/core/update_live_room_danmu"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCoreUpdateLiveRoomDanmu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CoreHTTPClientImpl) UpdateRule(ctx context.Context, in *UpdateRuleReq, opts ...http.CallOption) (*UpdateRuleResp, error) {
	var out UpdateRuleResp
	pattern := "/api/v1/core/update_rule"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCoreUpdateRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

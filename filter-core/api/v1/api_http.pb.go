// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.1
// - protoc             v3.14.0
// source: api/v1/api.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCoreGetConfig = "/v1.Core/GetConfig"
const OperationCoreSetConfig = "/v1.Core/SetConfig"

type CoreHTTPServer interface {
	GetConfig(context.Context, *GetConfigReq) (*GetConfigResp, error)
	SetConfig(context.Context, *SetConfigReq) (*SetConfigResp, error)
}

func RegisterCoreHTTPServer(s *http.Server, srv CoreHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/core/get_config", _Core_GetConfig0_HTTP_Handler(srv))
	r.POST("/api/v1/core/set_config", _Core_SetConfig0_HTTP_Handler(srv))
}

func _Core_GetConfig0_HTTP_Handler(srv CoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetConfigReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCoreGetConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetConfig(ctx, req.(*GetConfigReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetConfigResp)
		return ctx.Result(200, reply)
	}
}

func _Core_SetConfig0_HTTP_Handler(srv CoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetConfigReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCoreSetConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetConfig(ctx, req.(*SetConfigReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetConfigResp)
		return ctx.Result(200, reply)
	}
}

type CoreHTTPClient interface {
	GetConfig(ctx context.Context, req *GetConfigReq, opts ...http.CallOption) (rsp *GetConfigResp, err error)
	SetConfig(ctx context.Context, req *SetConfigReq, opts ...http.CallOption) (rsp *SetConfigResp, err error)
}

type CoreHTTPClientImpl struct {
	cc *http.Client
}

func NewCoreHTTPClient(client *http.Client) CoreHTTPClient {
	return &CoreHTTPClientImpl{client}
}

func (c *CoreHTTPClientImpl) GetConfig(ctx context.Context, in *GetConfigReq, opts ...http.CallOption) (*GetConfigResp, error) {
	var out GetConfigResp
	pattern := "/api/v1/core/get_config"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCoreGetConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CoreHTTPClientImpl) SetConfig(ctx context.Context, in *SetConfigReq, opts ...http.CallOption) (*SetConfigResp, error) {
	var out SetConfigResp
	pattern := "/api/v1/core/set_config"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCoreSetConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
